<?xml version="1.0" encoding="UTF-8"?><!--Converted at: Fri Mar 01 18:57:27 CST 2013-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.maicard.security.sql.FrontUser">

	<resultMap id="frontUserResult" type="FrontUser">
		<result property="uuid" column="uuid"/>
		<result property="userTypeId" column="user_type_id"/>
		<result property="userExtraTypeId" column="user_extra_type_id"/>
		<result property="username" column="username"/>
		<result property="gender" column="gender"/>
		<result property="userPassword" column="user_password"/>
		<result property="authType" column="auth_type"/>
		<result property="createTime" column="create_time"/>
		<result property="lastLoginTimestamp" column="last_login_timestamp"/>
		<result property="lastLoginIp" column="last_login_ip"/>
		<result property="nickName" column="nick_name"/>
		<result property="parentUuid" column="parent_uuid"/>
		<result property="headUuid" column="head_uuid"/>
		<result property="level" column="level"/>
		<result property="inviter" column="inviter"/>
		<result property="currentStatus" column="current_status"/>
		<result property="extraStatus" column="extra_status"/>
		<result property="levelName" column="level_name"/>
		<result property="inviterName" column="inviter_name"/>
		<result property="authKey" column="auth_key"/>
		<result property="memory" column="memory"/>
		<result property="lockGlobalUniqueId" column="lock_global_unique_id"/>
		<result property="ownerId" column="owner_id"/>
	</resultMap>

	<insert id="insert" parameterType="FrontUser"  useGeneratedKeys="true"  keyProperty="uuid">
		insert INTO front_user
			(<if test="uuid > 0">uuid, </if> owner_id, username, gender, user_password, user_type_id, user_extra_type_id, auth_type, current_status, extra_status, create_time, last_login_timestamp, last_login_ip,<if test="nickName!=null">nick_name,</if>parent_uuid, head_uuid, level, inviter, auth_key, memory , lock_global_unique_id)
		VALUES
			(<if test="uuid > 0">#{uuid}, </if> #{ownerId}, #{username}, #{gender}, #{userPassword}, #{userTypeId}, #{userExtraTypeId}, #{authType}, #{currentStatus}, #{extraStatus}, #{createTime}, #{lastLoginTimestamp}, #{lastLoginIp},<if test="nickName!=null">#{nickName},</if>#{parentUuid}, #{headUuid}, #{level}, #{inviter}, #{authKey}, #{memory},#{lockGlobalUniqueId})
	</insert>
	<select id="searchinviter" parameterType="int" resultType="String">	
		 CALL inviter_Search(#{uuid})
	</select>		
	<select id="makeCollection" statementType="CALLABLE" parameterType="String" resultType="String">	
		 CALL job_dispatch(#{custdata})
	</select>
	
	<select id="downloadBalanceCsv" parameterType="int" resultType="String">	
		 CALL accounttocsv(#{uuid})
	</select>	
	
	<select id="downloadNewAccountCsv" parameterType="int" resultType="String">	
		 CALL usertocsv(#{uuid})
	</select>	
	
	
	<update id="update" parameterType="FrontUser">
		UPDATE
			front_user
		SET
			user_type_id = #{userTypeId},
			user_extra_type_id = #{userExtraTypeId},
			username = #{username},
			gender = #{gender},
			user_password = #{userPassword},
			auth_type = #{authType},
			current_status = #{currentStatus},
			extra_status = #{extraStatus},
			last_login_timestamp = #{lastLoginTimestamp},
			last_login_ip = #{lastLoginIp},
			owner_id = #{ownerId},
			
			<if test="nickName!=null">
			nick_name = #{nickName},
			</if>
			parent_uuid = #{parentUuid},
			head_uuid = #{headUuid},
			<if test="authKey!=null">
			auth_key = #{authKey},
			</if>
			memory = #{memory},
			<if test="inviter > 0">
				inviter = #{inviter},
			</if>
			level = #{level},
			<if test="lockGlobalUniqueId == null">
			    lock_global_unique_id = NULL
			</if>
			<if test="lockGlobalUniqueId != null">
			    lock_global_unique_id = #{lockGlobalUniqueId}
			</if>
			
		WHERE
			uuid = #{uuid}
	</update>
	
	<update id="updateNoNull" parameterType="FrontUser">
		UPDATE
			front_user
		<set>
		    <if test="userTypeId > 0">
				user_type_id = #{userTypeId},
			</if>
			<if test="userExtraTypeId > 0">
				user_extra_type_id = #{userExtraTypeId},
			</if>
			<if test="username != null">
				username = #{username},
			</if>
			<if test="gender > 0">
				gender = #{gender},
			</if>
			<if test="userPassword != null">
				user_password = #{userPassword},
			</if>
			<if test="authType > 0">
				auth_type = #{authType},
			</if>
			<if test="currentStatus > 0">
				current_status = #{currentStatus},
			</if>
			<if test="extraStatus > 0">
				extra_status = #{extraStatus},
			</if>
			<if test="lastLoginTimestamp != null">
				last_login_timestamp = #{lastLoginTimestamp},
			</if>
			<if test="lastLoginIp != null">
			   last_login_ip = #{lastLoginIp},
			</if>
			<if test="ownerId > 0">
				owner_id = #{ownerId},
			</if>
			<if test="nickName!=null">
				nick_name = #{nickName},
			</if>
			<if test="parentUuid > 0">
				parent_uuid = #{parentUuid},
			</if>
			<if test="headUuid > 0">
				head_uuid = #{headUuid},
			</if>
			<if test="authKey!=null">
				auth_key = #{authKey},
			</if>
			<if test="memory != null">
				memory = #{memory},
			</if>
			<if test="inviter > 0">
				inviter = #{inviter},
			</if>
			<if test="level > 0">
				level = level,
			</if>
			<if test="lockGlobalUniqueId == null">
			    lock_global_unique_id = NULL
			</if>
			<if test="lockGlobalUniqueId != null">
			    lock_global_unique_id = #{lockGlobalUniqueId}
			</if>
		</set>	
		WHERE
			uuid = #{uuid}
	</update>
	
	<update id="lockUser" parameterType="FrontUserCriteria">
		UPDATE
			front_user
		SET
			owner_id = #{ownerId},		
			lock_global_unique_id = #{lockGlobalUniqueId},
			current_status = 120003			
		WHERE
			lock_global_unique_id IS NULL
			<if test="currentStatus != null">
				AND current_status in 
				<foreach item="item" collection="currentStatus" open="(" separator="," close=")">
	        			#{item}
	  			</foreach>				
	  		</if>
	  		<if test="inviters != null and inviters.length > 0">
				AND inviter in 
				<foreach item="item" collection="inviters" open="(" separator="," close=")">
	        			#{item}
	  			</foreach>				
	  		</if>
	  		<if test="parentUuid > 0">
	  		    AND (parent_uuid = #{parentUuid} OR parent_uuid = 0) 	  		    
	  		</if>
	  		
	  	LIMIT 1
	</update>
	
	<update id="changeUuid" parameterType="FrontUser">
		UPDATE
			front_user
		<set>
			uuid = #{uuid}
		</set>
		<where>
			uuid != #{uuid}
			AND
			username = #{username}
		</where>
	</update>

	<delete id="delete" parameterType="long">
		DELETE FROM
			front_user
		WHERE
			uuid = #{uuid}
	</delete>
	
	<select id="select" parameterType="long" resultMap="frontUserResult">
		SELECT
			a.uuid,
			a.user_type_id,
			a.user_extra_type_id,
			a.username,
			a.gender,
			a.user_password,
			a.auth_type,
			a.create_time,
			a.last_login_timestamp,
			a.last_login_ip,
			a.nick_name,
			a.parent_uuid,
			a.head_uuid,
			a.inviter,
			a.level,
			a.current_status,
			a.extra_status,
			a.auth_key,
			a.lock_global_unique_id,
			a.memory,<!-- 
			b.user_type_name,
			b.user_extra_type_name,
			c.user_level_project_name as level_name,
			d.username as inviter_name, -->
			a.owner_id
			
		FROM
			front_user as a <!-- 
			left join user_type as b on a.user_type_id = b.user_type_id and a.user_extra_type_id=b.user_extra_type_id
			left join user_level_project AS c ON a.level=c.user_level_id
			left join partner AS d ON a.inviter=d.uuid -->
		WHERE
			a.uuid = #{uuid}
	</select>

	<sql id="criteriaWhereClause">
		<where>
		a.user_type_id=121003
		<if test="username != null">
			AND a.username=#{username}
		</if>
		<if test="nickName != null">
			AND a.nick_name=#{nickName}
		</if>
		<if test="userPassword != null">
			AND a.user_password=#{userPassword}
		</if>
		<if test="authKey != null">
			AND a.auth_key=#{authKey}
		</if>
		<if test="currentStatus != null">
				AND a.current_status in 
				<foreach item="item" collection="currentStatus" open="(" separator="," close=")">
	        			#{item}
	  			</foreach>				
	  	</if>
		<if test="parentUuid > 0">
				AND a.inviter in (#{parentUuid}
				<if test="subUserList != null">
					<foreach item="item" collection="subUserList" open="," separator="," close="">
	        			#{item.uuid}
	  				</foreach>	
  				</if>
  				)			
		</if>
		<if test="headUuid > 0">
			AND a.head_uuid=#{headUuid}
		</if>
		<if test="inviters != null and inviters.length > 0">
				AND a.inviter in 
				<foreach item="item" collection="inviters" open="(" separator="," close=")">
	        			#{item}
	  			</foreach>				
	  	</if>
		<if test="uuid > 0">
			AND a.uuid=#{uuid}
		</if>
		<if test="likeUserName != null">
			AND (a.username like '%${userPassword}%')
		</if>
		<if test="createTimeBegin != null">
			AND a.create_time &gt;= #{createTimeBegin}
		</if>
		<if test="createTimeEnd != null">
			AND a.create_time &lt;= #{createTimeEnd}
		</if>
		<if test="lockGlobalUniqueId != null">
			AND a.lock_global_unique_id = #{lockGlobalUniqueId}
		</if>
		<if test="ownerId > 0">
			AND a.owner_id = #{ownerId}
		</if>
		</where>
	</sql>
    <sql id="criteriaWhereClause1">
	   <if test="uuids !=null" >
		   AND a.uuid in 
		  <foreach item="item" collection="uuids" open="(" separator="," close=")">
		    #{item}
		  </foreach>
	  </if>
	   <if test="usernames !=null" >
		   AND a.username in 
		  <foreach item="item" collection="usernames" open="(" separator="," close=")">
		    #{item}
		  </foreach>
	  </if>	  
   </sql>

	<select id="list" parameterType="FrontUserCriteria" resultMap="frontUserResult">
		SELECT
			a.uuid,
			a.user_type_id,
			a.user_extra_type_id,
			a.username,
			a.gender,
			a.user_password,
			a.auth_type,
			a.create_time,
			a.last_login_timestamp,
			a.last_login_ip,
			a.nick_name,
			a.parent_uuid,
			a.head_uuid,
			a.inviter,
			a.level,
			a.current_status,
			a.extra_status,		
			a.auth_key,
			a.lock_global_unique_id,
			a.memory,<!-- 
			b.user_type_name,
			b.user_extra_type_name,
			c.user_level_project_name as level_name, -->
			a.owner_id
		FROM
			front_user as a <!-- LEFT JOIN partner as d on a.inviter=d.uuid
			LEFT JOIN user_type as b on a.user_type_id = b.user_type_id and a.user_extra_type_id=b.user_extra_type_id
			LEFT JOIN user_level_project AS c ON a.level=c.user_level_id -->
		<include refid="criteriaWhereClause"/>
		<include refid="criteriaWhereClause1"/>
		ORDER BY
			create_time DESC
	</select>
	
	<select id="listPk" parameterType="FrontUserCriteria" resultType="long">
		SELECT
			a.uuid			
		FROM
			front_user as a LEFT JOIN partner as d on a.inviter=d.uuid
			LEFT JOIN user_type as b on a.user_type_id = b.user_type_id and a.user_extra_type_id=b.user_extra_type_id
			LEFT JOIN user_level_project AS c ON a.level=c.user_level_id
		<include refid="criteriaWhereClause"/>
		<include refid="criteriaWhereClause1"/>
		ORDER BY
			a.create_time DESC
	</select>
	<select id="listByPrepayment" parameterType="long" resultMap="frontUserResult">
       SELECT 
			a.uuid,
			a.user_type_id,
			a.user_extra_type_id,
			a.username,
			a.gender,
			a.user_password,
			a.auth_type,
			a.create_time,
			a.last_login_timestamp,
			a.last_login_ip,
			a.nick_name,
			a.parent_uuid,
			a.inviter,
			a.level,
			a.current_status,
			a.extra_status,
			a.auth_key,
			a.lock_global_unique_id,
			a.memory,
			a.owner_id
        FROM partner a WHERE UUID NOT IN (SELECT UUID FROM user_data_all WHERE data_define_id=259)
        <if test="_parameter> 0">
		  and 
		  a.uuid=#{_parameter}
		</if>
	</select>
	
	<update id="updateDynamicData" parameterType="UserDynamicData">
		UPDATE
			front_user
		SET
			last_login_timestamp=#{lastLogin},
			last_login_ip=#{lastLoginIp},
			extra_status = #{extraStatus}
		WHERE 
			uuid = #{uuid}
			AND
			user_type_id= #{userTypeId}
	</update>

	<select id="count" parameterType="FrontUserCriteria" resultType="int">
		SELECT
			COUNT(*)
		FROM
			front_user as a
		<include refid="criteriaWhereClause"/>
	</select>
	
	<select id="getMaxId" resultType="long">
		SELECT COALESCE(MAX(SUBSTR(`uuid`,4)),0)
		FROM
			front_user
	</select>
	
</mapper>