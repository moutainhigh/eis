<?xml version="1.0" encoding="UTF-8"?><!--Converted at: Fri Mar 01 18:57:32 CST 2013-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.maicard.security.sql.Partner">

	<resultMap id="PartnerResult" type="Partner">
		<result property="uuid" column="uuid"/>
		<result property="userTypeId" column="user_type_id"/>
		<result property="userExtraTypeId" column="user_extra_type_id"/>
		<result property="username" column="username"/>
		<result property="userPassword" column="user_password"/>
		<result property="authType" column="auth_type"/>
		<result property="authKey" column="auth_key"/>
		<result property="createTime" column="create_time"/>
		<result property="lastLoginTimestamp" column="last_login_timestamp"/>
		<result property="lastLoginIp" column="last_login_ip"/>
		<result property="nickName" column="nick_name"/>
		<result property="parentUuid" column="parent_uuid"/>
		<result property="headUuid" column="head_uuid"/>
		<result property="inviter" column="inviter"/>
		<result property="level" column="level"/>
		<result property="currentStatus" column="current_status"/>
		<result property="extraStatus" column="extra_status"/>
		<result property="ownerId" column="owner_id"/>

		<!-- <result property="userTypeName" column="user_type_name"/>
		<result property="userExtraTypeName" column="user_extra_type_name"/> -->
		
	</resultMap>

	<insert id="insert" parameterType="Partner" useGeneratedKeys="true"  keyProperty="uuid">
		INSERT INTO partner
			(<if test="uuid>0">uuid,</if> owner_id, username, user_password, user_type_id, user_extra_type_id, auth_type, auth_key, current_status, extra_status, create_time, last_login_ip, nick_name, parent_uuid, head_uuid, inviter, level)
		VALUES
			(<if test="uuid>0">#{uuid},</if> #{ownerId}, #{username}, #{userPassword}, #{userTypeId}, #{userExtraTypeId}, #{authType}, #{authKey}, #{currentStatus}, #{extraStatus}, #{createTime},  #{lastLoginIp}, #{nickName}, #{parentUuid}, #{headUuid}, #{inviter}, #{level})
	</insert>

	<update id="update" parameterType="Partner">
		UPDATE
			partner
		SET
			user_type_id = #{userTypeId},
			user_extra_type_id = #{userExtraTypeId},
			username = #{username},
			user_password = #{userPassword},
			auth_type = #{authType},
			auth_key = #{authKey},
			current_status = #{currentStatus},
			extra_status = #{extraStatus},
			create_time = #{createTime},
			last_login_ip = #{lastLoginIp},
			nick_name = #{nickName},
			inviter = #{inviter},
			head_uuid = #{headUuid},
			level = level,
			owner_id = #{ownerId}
		WHERE
			uuid = #{uuid}
	</update>
	
	<update id="updateNoNull" parameterType="Partner">
		UPDATE
			partner
		<set>
		    <if test="userTypeId > 0">
				user_type_id = #{userTypeId},
			</if>
			<if test="userExtraTypeId > 0">
				user_extra_type_id = #{userExtraTypeId},
			</if>
			<if test="username != null">
				username = #{username},
			</if>
			<if test="gender > 0">
				gender = #{gender},
			</if>
			<if test="userPassword != null">
				user_password = #{userPassword},
			</if>
			<if test="authType > 0">
				auth_type = #{authType},
			</if>
			<if test="currentStatus > 0">
				current_status = #{currentStatus},
			</if>
			<if test="extraStatus > 0">
				extra_status = #{extraStatus},
			</if>
			<if test="lastLoginTimestamp != null">
				last_login_timestamp = #{lastLoginTimestamp},
			</if>
			<if test="lastLoginIp != null">
			   last_login_ip = #{lastLoginIp},
			</if>
			<if test="ownerId > 0">
				owner_id = #{ownerId},
			</if>
			<if test="nickName!=null">
				nick_name = #{nickName},
			</if>
			<if test="parentUuid > 0">
				parent_uuid = #{parentUuid},
			</if>
			<if test="authKey!=null">
				auth_key = #{authKey},
			</if>
			<if test="memory != null">
				memory = #{memory},
			</if>
			<if test="inviter > 0">
				inviter = #{inviter},
			</if>
			<if test="level > 0">
				level = level,
			</if>
			<if test="lockGlobalUniqueId == null">
			    lock_global_unique_id = NULL
			</if>
			<if test="lockGlobalUniqueId != null">
			    lock_global_unique_id = #{lockGlobalUniqueId}
			</if>
		</set>	
		WHERE
			uuid = #{uuid}
	</update>
	

	<delete id="delete" parameterType="int">
		DELETE FROM
			partner
		WHERE
			uuid = #{uuid}
	</delete>
	
	<select id="select" parameterType="int" resultMap="PartnerResult">
		SELECT
			a.uuid,
			a.user_type_id,
			a.user_extra_type_id,
			a.username,
			a.user_password,
			a.auth_type,
			a.auth_key,
			a.create_time,
			a.last_login_timestamp,
			a.last_login_ip,
			a.nick_name,
			a.parent_uuid,
			a.head_uuid,
			a.inviter,
			a.level,
			a.current_status,
			a.extra_status,
			a.owner_id
			
			<!-- b.user_type_name,
			b.user_extra_type_name -->
			
		FROM
			partner as a <!-- left join user_type as b on a.user_type_id = b.user_type_id and a.user_extra_type_id=b.user_extra_type_id -->
		WHERE
			a.uuid = #{uuid} 
	</select>

   <sql id ="test">
     <where>
        <if test="username !=null">
           front_user.username=#{username}
        </if>
        </where>
   </sql>
	<sql id="criteriaWhereClause">
		<where>
			<if test="uuid > 0">
				a.uuid = #{uuid}
			</if>
			
			<if test="queryBeginTime != null">
				AND a.create_time &gt;= #{queryBeginTime}
			</if>
			<if test="queryEndTime != null">
				AND a.last_login_timestamp &lt;= #{queryEndTime}
			</if>
			
			<if test="nickName != null">
				AND a.nick_name = #{nickName}
			</if>
			<if test="authKey != null">
				AND a.auth_key = #{authKey}
			</if>
			
			<if test="userTypeId > 0">
				AND a.user_type_id = #{userTypeId}
			</if>
			<if test="userExtraTypeId > 0">
				AND a.user_extra_type_id = #{userExtraTypeId}
			</if>
			<if test="currentStatus != null">
				AND a.current_status in 
				<foreach item="item" collection="currentStatus" open="(" separator="," close=")">
	        			#{item}
	  			</foreach>				
	  		</if>
	  		<if test="extraStatus != null">
				AND a.extra_status in 
				<foreach item="item" collection="extraStatus" open="(" separator="," close=")">
	        			#{item}
	  			</foreach>				
	  		</if>
			<if test="username != null">
				AND a.username = #{username}
			</if>
			<if test="level > 0">
				AND a.level = #{level}
			</if>
			<if test="userPassword != null">
				AND a.user_password = #{userPassword}
			</if>
			<if test="inviters != null and inviters.length > 0">
				AND a.uuid in 
				<foreach item="item" collection="inviters" open="(" separator="," close=")">
	        			#{item}
	  			</foreach>				
	  		</if>
			<if test="headUuid > 0">
				AND a.head_uuid = #{headUuid}
			</if>
			<if test="ownerId > 0">
				AND a.owner_id = #{ownerId}
			</if>
			<if test="merchant == true">
				AND a.user_extra_type_id &gt; 0
			</if>
			<if test="parentUuid > 0">
				AND a.parent_uuid in (#{parentUuid}
				<if test="subUserList != null">
					<foreach item="item" collection="subUserList" open="," separator="," close="">
	        			#{item.uuid}
	  				</foreach>	
  				</if>
  				)	
		</if>
		
		<if test="uuids != null">
				AND a.uuid in (
			
					<foreach item="item" collection="uuids"  separator="," close="">
	        			#{item}
	  				</foreach>	
  				
  				)	
		</if>
		</where>
	</sql>

	<select id="list" parameterType="PartnerCriteria" resultMap="PartnerResult">
		SELECT
			a.uuid,
			a.user_type_id,
			a.cc,
			a.username,
			a.user_password,
			a.auth_type,
			a.create_time,
			a.last_login_timestamp,
			a.last_login_ip,
			a.nick_name,
			a.parent_uuid,
			a.head_uuid,
			a.inviter,
			a.level,
			a.current_status,
			a.extra_status,
			a.owner_id,
			
			b.user_type_name,
			b.user_extra_type_name
			
		FROM
			partner as a left join user_type as b on a.user_type_id = b.user_type_id and a.user_extra_type_id=b.user_extra_type_id
		
		<include refid="criteriaWhereClause"/>
		ORDER BY
			a.uuid DESC
	</select>
	
	<select id="listPk" parameterType="PartnerCriteria" resultType="long">
		SELECT
			a.uuid
			
		FROM
			partner as a left join user_type as b on a.user_type_id = b.user_type_id and a.user_extra_type_id=b.user_extra_type_id
		
		<include refid="criteriaWhereClause"/>
		ORDER BY
			a.uuid DESC
	</select>

	<select id="count" parameterType="PartnerCriteria" resultType="int">
		SELECT
			COUNT(*)
		FROM
			partner as a
		<include refid="criteriaWhereClause"/>
	</select>
	
	<update id="updateDynamicData" parameterType="UserDynamicData">
		UPDATE
			partner
		SET
			last_login_timestamp=#{lastLogin},
			last_login_ip=#{lastLoginIp},
			extra_status = #{extraStatus}
		WHERE 
			uuid = #{uuid}
			AND
			user_type_id= #{userTypeId}
	</update>

	<select id="listProgeny" parameterType="long" resultType="String">
		CALL get_progeny(#{uid});
	</select>
</mapper>