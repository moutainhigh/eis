<?xml version="1.0" encoding="UTF-8"?><!--Converted at: Fri Mar 01 18:53:55 CST 2013-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.maicard.money.sql.Money">

	<resultMap id="moneyResult" type="Money">
		<result property="uuid" column="uuid"/>
		<result property="marginMoney" column="margin_money"/>
		<result property="transitMoney" column="transit_money"/>
		<result property="chargeMoney" column="charge_money"/>
		<result property="frozenMoney" column="frozen_money"/>
		<result property="incomingMoney" column="incoming_money"/>
		<result property="giftMoney" column="gift_money"/>
		<result property="coin" column="coin"/>
		<result property="frozenCoin" column="frozen_coin"/>
		<result property="point" column="point"/>
		<result property="frozenPoint" column="frozen_point"/>
		<result property="score" column="score"/>
		<result property="frozenScore" column="frozen_score"/>
		<result property="ownerId" column="owner_id"/>
	</resultMap>
	
	<sql id="selectColumns">
			m.uuid,
			m.margin_money,
			m.transit_money,
			m.charge_money,
			m.frozen_money,
			m.incoming_money,
			m.gift_money,
			m.coin,
			m.frozen_coin,
			m.point,
			m.frozen_point,
			m.score,
			m.frozen_score,
			m.owner_id
	</sql>
	
   <select id="chargeMoney" parameterType="Money" resultType="String">
    call add_to_ms(#{uuid},#{chargeMoney},#{memo},#{operater})
   </select>
	<insert id="insert" parameterType="Money">
		INSERT INTO money
			(owner_id, uuid, margin_money, transit_money, charge_money, frozen_money, incoming_money, gift_money, coin, frozen_coin, point, frozen_point, score, frozen_score)
		VALUES
			(#{ownerId}, #{uuid}, #{marginMoney},  #{transitMoney}, #{chargeMoney}, #{frozenMoney},#{incomingMoney}, #{giftMoney}, #{coin}, #{frozenCoin}, #{point}, #{frozenPoint},  #{score}, #{frozenScore})
	</insert>

	<update id="update" parameterType="Money">
		UPDATE
			money
		SET
			owner_id = #{ownerId}, 
			margin_money = #{marginMoney},
			transit_money = #{transitMoney}, 
			charge_money = #{chargeMoney}, 
			frozen_money = #{frozenMoney}, 
			incoming_money = #{incomingMoney},
			gift_money = #{giftMoney}, 
			coin = #{coin}, 
			frozen_coin = #{frozenCoin}, 
			point = #{point},
			frozen_point = #{frozenPoint}, 
			score = #{score},
			frozen_score = #{frozenScore}
		
		WHERE 
			uuid = #{uuid}
	</update>

	<delete id="delete" parameterType="int">
		DELETE FROM
			money
		WHERE
			uuid = #{uuid}
	</delete>
	
	<select id="select" parameterType="int" resultMap="moneyResult">
		SELECT
			<include refid="selectColumns"/>
		FROM
			money m
		WHERE
			m.uuid = #{uuid}
	</select>

	<sql id="criteriaWhereClause">
		<where>
			<if test="uuid > 0">
				AND m.uuid = #{uuid}
			</if>
			<if test="inviters != null and inviters.length > 0">
				AND m.uuid in
				<foreach item="item" collection="inviters" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<if test="ownerId > 0">
				AND m.owner_id = #{ownerId}
			</if>
		</where>
	</sql>

	<select id="list" parameterType="MoneyCriteria" resultMap="moneyResult">
		SELECT
			<include refid="selectColumns"/>
		FROM
			money m
		<include refid="criteriaWhereClause"/>
		ORDER BY
			m.uuid ASC
	</select>
	
	<select id="listPk" parameterType="MoneyCriteria" resultType="long">
		SELECT
			m.uuid
		FROM
			money m
		<include refid="criteriaWhereClause"/>
		ORDER BY
			m.uuid ASC
	</select>
	
	<select id="listByPartner"  resultMap="moneyResult">
        SELECT 
			<include refid="selectColumns"/>
    	FROM money m WHERE UUID IN (
        SELECT UUID FROM partner WHERE UUID NOT IN (
       SELECT UUID FROM user_data_all WHERE data_define_id=259))
    </select>
	<select id="count" parameterType="MoneyCriteria" resultType="int">
		SELECT
			COUNT(*)
		FROM
			money m
		<include refid="criteriaWhereClause"/>
	</select>
	
	<update id="plus" parameterType="Money">
		UPDATE
			money
		<set>
			margin_money = margin_money + #{marginMoney},
			frozen_money = frozen_money + #{frozenMoney},
			transit_money = transit_money + #{transitMoney},
			charge_money = charge_money + #{chargeMoney},
			incoming_money = incoming_money + #{incomingMoney},
			gift_money = gift_money + #{giftMoney},
			coin = coin + #{coin},
			point = point + #{point},
			score = score + #{score}
		</set>
		<where>
			uuid = #{uuid}
		</where>
	</update>
	
	<update id="minus" parameterType="Money">
		UPDATE
			money
		<set>
			<if test="marginMoney > 0">
				margin_money = margin_money - #{marginMoney},
			</if>
			<if test="frozenMoney != 0">
				frozen_money = frozen_money - #{frozenMoney},
			</if>
			<if test="transitMoney > 0">
				transit_money = transit_money - #{transitMoney},
			</if>
			<if test="chargeMoney > 0">
				charge_money = charge_money - #{chargeMoney},
			</if>
			<if test="incomingMoney > 0">
				incoming_money = incoming_money - #{incomingMoney},
			</if>
			<if test="giftMoney > 0">
				gift_money = gift_money - #{giftMoney},
			</if>
			<if test="coin > 0">
				coin = coin - #{coin},
			</if>
			<if test="point > 0">
				point = point - #{point},
			</if>
			<if test="score > 0">
				score = score - #{score}
			</if>
		</set>
		<where>
			uuid = #{uuid}
			<if test="marginMoney > 0">
			AND	margin_money &gt;=  #{marginMoney}
			</if>
			<if test="frozenMoney > 0">
			AND	frozen_money &gt;=  #{frozenMoney}
			</if>
			<if test="transitMoney > 0">
			AND	transit_money &gt;=  #{transitMoney}
			</if>
			<if test="chargeMoney > 0">
				AND	charge_money &gt;= #{chargeMoney}
			</if>
			<if test="incomingMoney > 0">
				AND	incoming_money &gt;= #{incomingMoney}
			</if>
			<if test="giftMoney > 0">
				AND gift_money &gt;= #{giftMoney}
			</if>
			<if test="coin > 0">
				AND	coin &gt;= #{coin}
			</if>
			<if test="point > 0">
				AND	point &gt;= #{point}
			</if>
			<if test="score > 0">
				AND	score &gt;= #{score}
			</if>
		</where>
	</update>
	
	<update id="lock" parameterType="Money">
		UPDATE
			money
		<set>
			<if test="marginMoney > 0">
				margin_money=margin_money-#{marginMoney},
				frozen_money = frozen_money + #{marginMoney},
			</if>
			<if test="transitMoney > 0">
				transit_money= transit_money-#{transitMoney},
				frozen_money = frozen_money + #{transitMoney},
				</if>
			<if test="chargeMoney > 0">						
				charge_money=charge_money-#{chargeMoney},
				frozen_money = frozen_money + #{chargeMoney},
			</if>
			<if test="incomingMoney > 0">						
				incoming_money=incoming_money-#{incomingMoney},
				frozen_money = frozen_money + #{incomingMoney},
			</if>
			<if test="giftMoney > 0">						
				gift_money=gift_money-#{giftMoney}, 
				frozen_money = frozen_money + #{giftMoney},
			</if>
			<if test="coin > 0">						
				coin=coin-#{coin}, 
				frozen_coin = frozen_coin + #{coin},
			</if>
			<if test="point > 0">						
				point=point-#{point}, 
				frozen_point = frozen_point + #{point},
			</if>
			<if test="score > 0">						
				score=score-#{score},
				frozen_score = frozen_score + #{score},
			</if>
			
		</set>	
			
		WHERE
			uuid = #{uuid}
			<if test="marginMoney > 0">					
				AND margin_money-#{marginMoney} &gt;= 0
			</if>
			<if test="transitMoney > 0">					
				AND transit_money-#{transitMoney} &gt;= 0
			</if>
			<if test="chargeMoney > 0">						
				AND charge_money-#{chargeMoney} &gt;= 0
			</if>
			<if test="incomingMoney > 0">		
				AND incoming_money-#{incomingMoney} &gt;= 0
			</if>
			<if test="giftMoney > 0">		
				AND gift_money-#{giftMoney} &gt;= 0
			</if>
			<if test="coin > 0">		
				AND coin-#{coin} &gt;= 0
			</if>
			<if test="point > 0">		
				AND point-#{point} &gt;= 0
			</if>
			<if test="score > 0">		
				AND score-#{score} &gt;= 0
			</if>
			
	</update>
	
	<update id="unLock" parameterType="Money">
		UPDATE
			money
		<set>
			<if test="marginMoney > 0">			
				margin_money=margin_money+#{marginMoney}, 
				frozen_money = frozen_money - #{marginMoney},
			</if>
			<if test="chargeMoney > 0">		
				charge_money=charge_money+#{chargeMoney}, 
				frozen_money = frozen_money + #{transitMoney},
			</if>
			<if test="incomingMoney > 0">		
				incoming_money=incoming_money+#{incomingMoney}, 
				frozen_money = frozen_money + #{transitMoney},
			</if>
			<if test="giftMoney > 0">		
				gift_money=gift_money+#{giftMoney}, 
				frozen_money = frozen_money + #{transitMoney},
			</if>
			<if test="coin > 0">		
				coin=coin+#{coin}, 
				frozen_coin = frozen_coin - #{coin},
			</if>
			<if test="point > 0">		
				point=point+#{point}, 
				frozen_point = frozen_point - #{point},
			</if>
			<if test="score > 0">		
				score=score+#{score},
				frozen_score = frozen_score - #{score},
			</if>
		</set>	
		WHERE
			uuid = #{uuid}
			AND
			<if test="marginMoney > 0">					
				AND frozen_money-#{marginMoney} &gt;= 0
			</if>
			<if test="transitMoney > 0">					
				AND frozen_money-#{transitMoney} &gt;= 0
			</if>
			<if test="chargeMoney > 0">						
				AND frozen_money-#{chargeMoney} &gt;= 0
			</if>
			<if test="incomingMoney > 0">		
				AND frozen_money-#{incomingMoney} &gt;= 0
			</if>
			<if test="giftMoney > 0">		
				AND frozen_money-#{giftMoney} &gt;= 0
			</if>
			<if test="coin > 0">		
				AND frozen_coin-#{coin} &gt;= 0
			</if>
			<if test="point > 0">		
				AND frozen_point-#{point} &gt;= 0
			</if>
			<if test="score > 0">		
				AND frozen_score-#{score} &gt;= 0
			</if>			
	</update>
	
	
	

</mapper>